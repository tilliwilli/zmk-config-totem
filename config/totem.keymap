// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include "../zmk-nodefree-config/helper.h"

/* Layers aliases */
#define DEF   0
#define SYM   1
#define NUM   2
#define FUN   3
#define WIN   4
#define NAVL  5
#define NAV   6

// #include "mouse.dtsi"

#define _X_ &none
#define ___ &trans

#define QUICK_TAP_MS 175

/************************************************************************************/
// OOTB behavior configurations

&sk {  // sticky-key config
    release-after-ms = <900>;
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // regular layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};
ZMK_BEHAVIOR(ltw, hold_tap, // layer-tap w/o quick tap
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&kp>;
)

&mt {  // mod-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/************************************************************************************/
// some general macro defines

#define SIMPLE_MACRO(NAME, KEYPRESSES) \
    ZMK_BEHAVIOR(NAME, macro, \
        bindings = <KEYPRESSES>; \
    )

// hold-tap with regular keypress on tap and a simple keypress macro on hold
#define MACROHOLD(NAME, MACROKEYPRESSES) \
    SIMPLE_MACRO(macrohold_macro_ ## NAME, MACROKEYPRESSES) \
    ZMK_BEHAVIOR(macrohold_ ## NAME, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <200>; \
        bindings = <&macrohold_macro_ ## NAME>, <&kp>; \
    )

/************************************************************************************/
// Homerow mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                          // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <100>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/************************************************************************************/
// Smart layers: Caps-word, Num-word and Smart-mouse

// tap/hold: shift | shift + tap (by using the HRM shift): caps-word
ZMK_BEHAVIOR(smart_shft, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LSFT>, <&caps_word>;
)
&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE LEFT RIGHT UP DOWN>;
};


// tap: num-word | hold: num-layer
// num-word requires PR #1451

// #define SMART_NUM &smart_num NUM 0
// ZMK_BEHAVIOR(smart_num, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     bindings = <&mo>, <&num_word>;
// )
// &num_word {
//     layers = <NUM>;
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LPAR RPAR RIGHT LEFT F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12>;
//     ignore-modifiers;
// };

// using a regular tap/hold layer switch to the numbers layer in the meanwhile…
ZMK_BEHAVIOR(mo_tog, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&tog>;
)
#define MOTOG(LAYER) &mo_tog LAYER LAYER
// #define SMART_NUM MOTOG(NUM)


// smart-mouse, requires PR #1366
// ZMK_BEHAVIOR(smart_mouse, tri_state,
//     bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
//     ignored-layers = <MOUSE>;
// )

/************************************************************************************/
// Misc. custom behaviors

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <LT2>;
)

// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

// tap: question mark | hold: navigation layer | shift + tap: exclamation mark (with ' != ' on hold)
MACROHOLD(excl, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)
#define EXCLHOLD &macrohold_excl 0 EXCL
ZMK_BEHAVIOR(qexclnav, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&lt NAV QMARK>, <EXCLHOLD>;
)

// SPACE with navigation layer on hold
// note: there is no quick-tap repeat on regular tap-hold to ease adding a space while navigating around (i.e. hopping in and out of the navigation layer)
// however, RSHIFT-Space (with right shift!) directly outputs a regular space keypress (without shift and with repeat) to easily add repeated spaces without needing to hammer the key
// left shift space (when tapped) outputs exactly that: shift-space
ZMK_BEHAVIOR(spc_nav, mod_morph,
    mods = <(MOD_RSFT)>;
    bindings = <&ltw NAV SPACE>, <&kp SPACE>;
)

/************************************************************************************/
// Hold-tap with single taps of (modified) keys on hold (no repeat on hold)

ZMK_BEHAVIOR(simpletap, macro_one_param,
    bindings = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>;
)
ZMK_BEHAVIOR(cmdtap, macro_one_param,
    bindings = <&macro_press &kp LGUI>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LGUI>;
)
ZMK_BEHAVIOR(cmdsfttap, macro_one_param,
    bindings = <&macro_press &kp LGUI &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LSFT &kp LGUI>;
)
ZMK_BEHAVIOR(hypertap, macro_one_param,
    bindings = <&macro_press &kp LGUI &kp LALT &kp LCTL &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LGUI &kp LALT &kp LCTL &kp LSFT>;
)

ZMK_BEHAVIOR(cmdhold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&cmdtap>, <&kp>;
)
ZMK_BEHAVIOR(cmdsfthold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&cmdsfttap>, <&kp>;
)
ZMK_BEHAVIOR(hyperhold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&hypertap>, <&kp>;
)

// auto-shift for a CMD-* keypress
#define ASCMD(keycode)  &cmdsfthold keycode LG(keycode)

// tap: CMD+G | hold: CMD+F
#define CMD_G_F      &cmdhold F LG(G)
// tap: CMD+SHFT+G | hold: CMD+SHFT+F
#define CMD_SFT_G_F  &cmdsfthold F LG(LS(G))

// tap: CTRL+SHIFT+TAB | hold: CMD+L
#define CMD_L_CSTAB  &cmdhold L LC(LS(TAB))
// tap: CTRL+TAB | hold: CMD+D
#define CMD_D_CTAB   &cmdhold D LC(TAB)


/************************************************************************************/
// Misc. defines

// cancel caps-word, num-word and smart-mouse by sending a fake "cancel" key that does nothing, but is not whitelisted on any smart layer; also remove all layers
ZMK_BEHAVIOR(cancel_all, macro,
    bindings = <&kp K_CANCEL &to DEF>;
)

#define HYPER(keycode)  LC(LA(LG(LS(keycode))))
#define MY_MEH(keycode) LC(LA(LG(keycode)))       // different from "regular" meh which does CTRL-ALT-SHIFT instead of CTRL-ALT-GUI
// hyper on hold, my meh on tap
#define HYPERMEH(keycode) &hyperhold keycode MY_MEH(keycode)

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// COMBOS

/*                KEY POSITIONS

  ╭─────────-───────────────╮ ╭─────────────────────────╮
  │     LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4     │
  │     LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4     │
  │ LB5 LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────────╯
              ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <100>;

#define COMBO_TERM_FAST 22
#define COMBO_TERM_SLOW 30
#define COMBO_TERM_CROSSHAND 40

// make homerow combos tap-only (so HRMs can be chorded instantaneously)
#define HMC_AE    &hml LC(LALT) LA(A)
#define HMC_SZ    &hml LA(LSFT) LA(S)
#define HMC_DQT   &hml LG(LSFT) DQT

#define HMC_SQT   &hmr RG(RSFT) SQT
#define HMC_UE    &hmr RA(RSFT) LA(U)
#define HMC_OE    &hmr RC(RALT) LA(O)

// some one-shot open/close braces macros
// SIMPLE_MACRO(lrbkt, &kp LBKT &kp RBKT)
// SIMPLE_MACRO(lrbrc, &kp LBRC &kp RBRC)
// SIMPLE_MACRO(lrpar, &kp LPAR &kp RPAR)
// SIMPLE_MACRO(ltgt,  &kp LT &kp GT)

// the EURO sign
#define EURO &kp LS(LA(N4))

// hold macros for some special symbols
MACROHOLD(equal, &kp SPACE &kp EQUAL &kp EQUAL &kp SPACE)
#define EQUALHOLD &macrohold_equal 0 EQUAL
MACROHOLD(amps, &kp SPACE &kp AMPS  &kp AMPS  &kp SPACE)
#define AMPSHOLD &macrohold_amps 0 AMPS
MACROHOLD(pipe, &kp SPACE &kp PIPE  &kp PIPE  &kp SPACE)
#define PIPEHOLD &macrohold_pipe 0 PIPE

/*********************************************************/
// Horizontal combos

// Left hand
ZMK_COMBO(lbrc,  &kp LBRC,      LT3 LT2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(lpar,  &kp LPAR,      LT2 LT1,     ALL, COMBO_TERM_FAST)
// ZMK_COMBO(lrbrc, &lrbrc,        LT3 LT1,     ALL, COMBO_TERM_FAST)

ZMK_COMBO(ae,    HMC_AE,        LM4 LM3,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(sz,    HMC_SZ,        LM3 LM2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(dqt,   HMC_DQT,       LM2 LM1,     ALL, COMBO_TERM_FAST)

ZMK_COMBO(lt,    &kp LT,        LB3 LB2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(lbkt,  &kp LBKT,      LB2 LB1,     ALL, COMBO_TERM_FAST)
// ZMK_COMBO(lrbkt, &lrbkt,        LB3 LB1,     ALL, COMBO_TERM_FAST)

// Right hand
ZMK_COMBO(rpar,  &kp RPAR,      RT1 RT2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(rbrc,  &kp RBRC,      RT2 RT3,     ALL, COMBO_TERM_FAST)
// ZMK_COMBO(lrpar, &lrpar,        RT1 RT3,     ALL, COMBO_TERM_FAST)

ZMK_COMBO(sqt,   HMC_SQT,       RM1 RM2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(ue,    HMC_UE,        RM2 RM3,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(oe,    HMC_OE,        RM3 RM4,     ALL, COMBO_TERM_FAST)

ZMK_COMBO(rbkt,  &kp RBKT,      RB1 RB2,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(gt,    &kp GT,        RB2 RB3,     ALL, COMBO_TERM_FAST)
// ZMK_COMBO(ltgt,  &ltgt,         RB1 RB3,     ALL, COMBO_TERM_FAST)

/*********************************************************/
// Vertical combos

// Left hand
ZMK_COMBO(at,    &kp AT,        LT3 LM3,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(hash,  &kp HASH,      LT2 LM2,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(dllr,  &kp DLLR,      LT1 LM1,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(prcnt, &kp PRCNT,     LT0 LM0,     ALL, COMBO_TERM_SLOW)

ZMK_COMBO(grave, &kp GRAVE,     LM3 LB3,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(bslh,  &kp BSLH,      LM2 LB2,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(equal, EQUALHOLD,     LM1 LB1,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(tilde, &kp TILDE,     LM0 LB0,     ALL, COMBO_TERM_SLOW)

// Right hand
ZMK_COMBO(caret, &kp CARET,     RT0 RM0,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(plus,  &kp PLUS,      RT1 RM1,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(star,  &kp STAR,      RT2 RM2,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(amps,  AMPSHOLD,      RT3 RM3,     ALL, COMBO_TERM_SLOW)

ZMK_COMBO(under, &kp UNDER,     RM0 RB0,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(minus, &kp MINUS,     RM1 RB1,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(fslh,  &kp FSLH,      RM2 RB2,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(pipe,  PIPEHOLD,      RM3 RB3,     ALL, COMBO_TERM_SLOW)

/*********************************************************/
// Cross hand combos
ZMK_COMBO(nav,   &caps_word,       LM2 RM2,     ALL, COMBO_TERM_CROSSHAND)

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// The actual keymap layers

ZMK_LAYER(base,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  &kp Q         &kp W         &kp L         &kp D         &kp P           &kp J         &kp M         &kp U         &kp Y         &kp SQT
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &hml LCTL A   &hml LALT S   &hml LSFT R   &hml LGUI T   &kp G           &kp F         &hmr RGUI N   &hmr RSFT E   &hmr RALT I   &hmr RCTL O
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    &kp Q         &lt NAVL X    &kp Z         &kp K         &kp C         &kp V           &kp B         &kp H         &comma_morph  &dot_morph    &qexclnav     &kp SQT
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &lt SYM ESC   &lt NAV BSPC  &lt WIN DEL     &lt FUN RET   &lt NUM SPACE &lt SYM TAB
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(symbols,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT     &kp CARET     &kp PLUS      &kp STAR      EQUALHOLD     _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &mt LCTL LT   &mt LALT LBKT &mt LSFT LBRC &mt LGUI LPAR &kp TILDE       AMPSHOLD      &mt RGUI MINUS &mt RSFT FSLH &mt RALT BSLH &kp RCTL
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           &kp GT        &kp RBKT      &kp RBRC      &kp RPAR      &kp GRAVE       PIPEHOLD      &kp UNDERSCORE &comma_morph &dot_morph    &qexclnav     _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &lt SYM ESC   &kp BSPC      &kp DEL         &kp RET       &kp SPACE     &lt SYM TAB
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(numbers,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           &kp N7        &kp N8        &kp N9        &kp PERCENT     _X_           &kp PLUS      &kp STAR      &kp EQUAL     _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &kp N0        &kp N4        &kp N5        &kp N6        _X_             _X_           &mt RGUI MINUS &mt RSFT FSLH &kp RALT      &kp RCTL
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼────────────-┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           &kp N0        &kp N1        &kp N2        &kp N3        &kp N0          _X_           _X_           _X_           _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &kp DOT       &kp BSPC      &kp COMMA       _X_           &mo NUM       _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(function,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           &kp F7        &kp F8        &kp F9        &kp F12         _X_           _X_           _X_           _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  _X_           &kp F4        &kp F5        &kp F6        &kp F11         _X_           &kp RGUI      &kp RSFT      &kp RALT      &kp RCTL
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           _X_           &kp F1        &kp F2        &kp F3        &kp F10         _X_           _X_           _X_           _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              _X_           _X_           _X_             &mo FUN       &kp C_PP      _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(windows,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  HYPERMEH(F9)  HYPERMEH(W)   HYPERMEH(L)   HYPERMEH(D)   ASCMD(GRAVE)    &kp C_BRI_UP  _X_           &kp C_VOL_UP  _X_           &bt BT_SEL 2
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  HYPERMEH(A)   HYPERMEH(S)   HYPERMEH(R)   HYPERMEH(T)   HYPERMEH(G)     &kp C_BRI_DN  &kp C_PREV    &kp C_VOL_DN  &kp C_NEXT    &bt BT_SEL 1
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    HYPERMEH(F10) HYPERMEH(X)   HYPERMEH(Z)   HYPERMEH(K)   HYPERMEH(C)   HYPERMEH(V)     _X_           _X_           &kp C_MUTE    _X_           &bt BT_SEL 0  &bt BT_CLR
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &kp CAPSLOCK  &kp C_PP      &mo WIN         &kp C_PP      _X_           _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(navigation_left,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           &kp BSPC      &kp UP        &kp DEL       _X_             _X_           _X_           _X_           _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  _X_           &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_UP       _X_           _X_           _X_           _X_           _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           &mo NAVL      &kp HOME      _X_           &kp END       &kp PG_DN       _X_           _X_           _X_           _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &kp TAB       &kp SPACE     &kp RET         _X_           _X_           _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(navigation,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  &kp LG(Q)     &kp LG(W)     CMD_L_CSTAB   CMD_D_CTAB    CMD_SFT_G_F     _X_           &kp BSPC      &kp UP        &kp DEL       _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &mt LCTL LG(A) &mt LALT LG(S) &mt LSFT LG(R) &mt LGUI LG(T) CMD_G_F     &kp PG_UP     &kp LEFT      &kp DOWN      &kp RIGHT     _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    &kp LG(LBKT)  &kp LG(X)     &kp LG(Z)     &kp LG(K)     &kp LG(C)     &kp LG(V)       &kp PG_DN     &kp HOME      _X_           &kp END       &mo NAV       &kp LG(RBKT)
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              _X_           &mo NAV       _X_             &kp RET       &kp SPACE     &kp TAB
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

/*
ZMK_LAYER(template,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              _X_           _X_           _X_             _X_           _X_           _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)
*/