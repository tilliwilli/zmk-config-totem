// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include "../zmk-nodefree-config/helper.h"

/* Layers aliases */
#define L_DEF   0
#define L_GAME  1
#define L_SYM   2
#define L_NUMMEH 3
#define L_NUMFN 4
#define L_NUMPAD 5
#define L_HYPER 6
#define L_MEDIA 7
#define L_NAVL  8
#define L_NAV   9

// #include "mouse.dtsi"

#define _X_ &none
#define ___ &trans

#define TAPPING_TERM 200
#define QUICK_TAP_MS 175
#define PRIOR_IDLE 100

/************************************************************************************/
// OOTB behavior configurations
/************************************************************************************/

&sk {  // sticky-key config
    release-after-ms = <900>;
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // regular layer-tap config
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};
ZMK_BEHAVIOR(ltw, hold_tap, // layer-tap w/o quick tap
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&mo>, <&kp>;
)

&mt {  // mod-tap config
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/************************************************************************************/
// General macro behaviors
/************************************************************************************/

#define SIMPLE_MACRO(NAME, KEYPRESSES) \
    ZMK_BEHAVIOR(NAME, macro, \
        bindings = <KEYPRESSES>; \
    )

// hold-tap with regular keypress on tap and a simple keypress macro on hold
#define MACROHOLD(NAME, MACROKEYPRESSES) \
    SIMPLE_MACRO(macrohold_macro_ ## NAME, MACROKEYPRESSES) \
    ZMK_BEHAVIOR(macrohold_ ## NAME, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <TAPPING_TERM>; \
        bindings = <&macrohold_macro_ ## NAME>, <&kp>; \
    )

/************************************************************************************/
// Homerow mods
/************************************************************************************/

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                          // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <PRIOR_IDLE>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/************************************************************************************/
// Smart layers: Caps-word, Num-word and Smart-mouse
/************************************************************************************/

// tap/hold: shift | shift + tap (by using the HRM shift): caps-word
ZMK_BEHAVIOR(smart_shft, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LSFT>, <&caps_word>;
)
&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE LEFT RIGHT UP DOWN>;
};


// tap: num-word | hold: num-layer
// num-word requires PR #1451

// #define SMART_NUM &smart_num NUM 0
// ZMK_BEHAVIOR(smart_num, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <TAPPING_TERM>;
//     bindings = <&mo>, <&num_word>;
// )
// &num_word {
//     layers = <NUM>;
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LPAR RPAR RIGHT LEFT F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12>;
//     ignore-modifiers;
// };

// using a regular tap/hold layer switch to the numbers layer in the meanwhile…
ZMK_BEHAVIOR(mo_tog, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&mo>, <&tog>;
)
#define MOTOG(LAYER) &mo_tog LAYER LAYER
// #define SMART_NUM MOTOG(NUM)


// smart-mouse, requires PR #1366
// ZMK_BEHAVIOR(smart_mouse, tri_state,
//     bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
//     ignored-layers = <MOUSE>;
// )


// cancel caps-word, num-word and smart-mouse by sending a fake "cancel" key that does nothing, but is not whitelisted on any smart layer; also remove all layers
ZMK_BEHAVIOR(cancel_all, macro,
    bindings = <&kp K_CANCEL &to L_DEF>;
)

/************************************************************************************/
// Misc. custom behaviors
/************************************************************************************/

// Alt+Tab swapper
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <LT2>;
)

// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

// tap: question mark | hold: navigation layer | shift + tap: exclamation mark (with ' != ' on hold)
MACROHOLD(excl, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)
#define EXCLHOLD &macrohold_excl 0 EXCL
ZMK_BEHAVIOR(qexclnav, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&lt L_NAV QMARK>, <EXCLHOLD>;
)

// SPACE with navigation layer on hold
// note: there is no quick-tap repeat on regular tap-hold to ease adding a space while navigating around (i.e. hopping in and out of the navigation layer)
// however, RSHIFT-Space (with right shift!) directly outputs a regular space keypress (without shift and with repeat) to easily add repeated spaces without needing to hammer the key
// left shift space (when tapped) outputs exactly that: shift-space
ZMK_BEHAVIOR(spc_nav, mod_morph,
    mods = <(MOD_RSFT)>;
    bindings = <&ltw L_NAV SPACE>, <&kp SPACE>;
)

// hold macros for some special symbols
MACROHOLD(equal, &kp SPACE &kp EQUAL &kp EQUAL &kp SPACE)
#define EQUALHOLD &macrohold_equal 0 EQUAL
MACROHOLD(amps, &kp SPACE &kp AMPS  &kp AMPS  &kp SPACE)
#define AMPSHOLD &macrohold_amps 0 AMPS
MACROHOLD(pipe, &kp SPACE &kp PIPE  &kp PIPE  &kp SPACE)
#define PIPEHOLD &macrohold_pipe 0 PIPE

SIMPLE_MACRO(select_word, &kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT)))
SIMPLE_MACRO(extend_word, &kp LA(LS(RIGHT)))

/************************************************************************************/
// Hold-tap with single taps of (modified) keys on hold (no repeat on hold)
/************************************************************************************/

ZMK_BEHAVIOR(simpletap, macro_one_param,
    bindings = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>;
)
ZMK_BEHAVIOR(cmdtap, macro_one_param,
    bindings = <&macro_press &kp LGUI>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LGUI>;
)
ZMK_BEHAVIOR(cmdsfttap, macro_one_param,
    bindings = <&macro_press &kp LGUI &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LSFT &kp LGUI>;
)
ZMK_BEHAVIOR(hypertap, macro_one_param,
    bindings = <&macro_press &kp LGUI &kp LALT &kp LCTL &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LSFT &kp LCTL &kp LALT &kp LGUI>;
)

ZMK_BEHAVIOR(cmdhold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&cmdtap>, <&kp>;
)
ZMK_BEHAVIOR(cmdsfthold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&cmdsfttap>, <&kp>;
)
ZMK_BEHAVIOR(hyperhold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&hypertap>, <&kp>;
)

// tap: keypress | hold: CMD+keypress
#define ACMD(keycode)   &cmdhold keycode keycode
// tap: CMD+keypress | hold: CMD+SHIFT+keypress
#define ASCMD(keycode)  &cmdsfthold keycode LG(keycode)

// tap: CMD+G | hold: CMD+F
#define CMD_G_F      &cmdhold F LG(G)
// tap: CMD+SHFT+G | hold: CMD+SHFT+F
#define CMD_SFT_G_F  &cmdsfthold F LG(LS(G))

// tap: CTRL+SHIFT+TAB | hold: CMD+L
#define CMD_L_CSTAB  &cmdhold L LC(LS(TAB))
// tap: CTRL+TAB | hold: CMD+D
#define CMD_D_CTAB   &cmdhold D LC(TAB)


/************************************************************************************/
// Hyper/meh stuff
/************************************************************************************/

#define HYPER(keycode) LC(LA(LG(LS(keycode))))
#define MEH(keycode)   LC(LA(LG(keycode)))       // different from "regular" meh which does CTRL-ALT-SHIFT instead of CTRL-ALT-GUI
// hyper on hold, meh on tap
#define HYPERMEH(keycode) &hyperhold keycode MEH(keycode)

//ZMK_BEHAVIOR(hypercancel, hold_tap,
//    flavor = "tap-preferred";
//    tapping-term-ms = <TAPPING_TERM>;
//    bindings = <&kp>, <&cancel_all>;
//)
//#define HYPERCANCEL &hypercancel LC(LA(LS(LGUI))) 0

//#define HYPERBSPC &mt LC(LA(LS(LGUI))) BSPC

// activate a layer while also holding HYPER modifier(s)
ZMK_BEHAVIOR(hypermo, macro_one_param,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings = <&macro_press &kp LGUI &kp LALT &kp LCTL &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_press &mo MACRO_PLACEHOLDER>
             , <&macro_pause_for_release>
             , <&macro_param_1to1>
             , <&macro_release &mo MACRO_PLACEHOLDER>
             , <&macro_release &kp LSFT &kp LCTL &kp LALT &kp LGUI>;
)
ZMK_BEHAVIOR(hyperlt, hold_tap,
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    bindings = <&hypermo>, <&kp>;
)
#define HYPER_ESC &hyperlt L_HYPER ESC

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// COMBOS
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

/*                KEY POSITIONS

  ╭─────────-───────────────╮ ╭─────────────────────────╮
  │     LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4     │
  │     LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4     │
  │ LB5 LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────────╯
              ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <PRIOR_IDLE>;

#define COMBO_TERM_FAST 22
#define COMBO_TERM_SLOW 30
#define COMBO_TERM_CROSSHAND 40

#define COMBO_LAYERS    L_DEF L_NUMMEH L_NUMFN L_NUMPAD L_NAV

/*********************************************************/
// Horizontal combos

// Left hand
ZMK_COMBO(lbrc,  &kp LBRC,      LT3 LT2,     COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(lpar,  &kp LPAR,      LT2 LT1,     COMBO_LAYERS, COMBO_TERM_FAST)

ZMK_COMBO(sz,    &hml LA(LSFT) LA(S), LM3 LM2, COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(ae,    &hml LG(LSFT) LA(A), LM2 LM1, COMBO_LAYERS, COMBO_TERM_FAST)

ZMK_COMBO(lt,    &kp LT,        LB3 LB2,     COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(lbkt,  &kp LBKT,      LB2 LB1,     COMBO_LAYERS, COMBO_TERM_FAST)

// Right hand
ZMK_COMBO(rpar,  &kp RPAR,      RT1 RT2,     COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(rbrc,  &kp RBRC,      RT2 RT3,     COMBO_LAYERS, COMBO_TERM_FAST)

ZMK_COMBO(ue,    &hmr RG(RSFT) LA(U), RM1 RM2, COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(oe,    &hmr RA(RSFT) LA(O), RM2 RM3, COMBO_LAYERS, COMBO_TERM_FAST)

ZMK_COMBO(rbkt,  &kp RBKT,      RB1 RB2,     COMBO_LAYERS, COMBO_TERM_FAST)
ZMK_COMBO(gt,    &kp GT,        RB2 RB3,     COMBO_LAYERS, COMBO_TERM_FAST)

/*********************************************************/
// Vertical combos

// Left hand
ZMK_COMBO(hash,  &kp HASH,      LT2 LM2,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(dllr,  &kp DOLLAR,    LT1 LM1,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(prcnt, &kp PERCENT,   LT0 LM0,     COMBO_LAYERS, COMBO_TERM_SLOW)

ZMK_COMBO(equal, EQUALHOLD,     LM2 LB2,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(at,    &kp AT,        LM1 LB1,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(grave, &kp GRAVE,     LM0 LB0,     COMBO_LAYERS, COMBO_TERM_SLOW)

// Right hand
ZMK_COMBO(star,  &kp STAR,      RT0 RM0,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(plus,  &kp PLUS,      RT1 RM1,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(amps,  AMPSHOLD,      RT2 RM2,     COMBO_LAYERS, COMBO_TERM_SLOW)

ZMK_COMBO(bslh,  &kp BSLH,      RM0 RB0,    COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(fslh,  &kp FSLH,      RM1 RB1,     COMBO_LAYERS, COMBO_TERM_SLOW)
ZMK_COMBO(pipe,  PIPEHOLD,      RM2 RB2,     COMBO_LAYERS, COMBO_TERM_SLOW)

/*********************************************************/
// Cross hand combos
//ZMK_COMBO(capsword,   &caps_word,       LM2 RM2,     ALL, COMBO_TERM_CROSSHAND)

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// The actual keymap layers
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

ZMK_LAYER(base,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp Q          &kp W          &lt L_NUMPAD L &kp D          &kp P            &kp J          &kp M          &kp O          &kp Y          &kp SQT
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &hml LCTL A    &hml LALT S    &hml LSFT R    &hml LGUI T    &kp G            &kp F          &hmr RGUI N    &hmr RSFT E    &hmr RALT I    &hmr RCTL U
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    &kp LA(A)      &lt L_NAVL X   &kp Z          &kp K          &lt L_SYM C    &kp V            &kp B          &lt L_SYM H    &comma_morph   &dot_morph     &lt L_NAV MINUS &kp LA(U)
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 HYPER_ESC      &lt L_NAV BSPC &lt L_NUMMEH DEL &lt L_NUMFN RET &mt RSFT SPACE &lt L_MEDIA TAB
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(gaming,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp Q          &kp W          &kp E          &kp R          &kp T            &kp Y          &kp U          &kp I          &kp O          &kp P
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &kp A          &kp S          &kp D          &kp F          &kp G            &kp H          &kp J          &kp K          &kp L          &kp SEMICOLON
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    &kp LSFT       &kp B          &kp Z          &kp X          &kp C          &kp V            &kp N          &kp M          &kp COMMA      &kp DOT        &kp FSLH       &kp RSFT
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 &mt LCTL ESC   &kp SPACE      &kp TAB          &lt L_NUMFN BSPC &kp RET      &lt L_MEDIA DEL
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(symbols,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   _X_            &kp AT         &kp LBRC       &kp RBRC       &kp PERCENT      _X_            &kp LT         &kp GT         &kp PIPE       &kp SQT
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &mt LCTL CARET &mt LALT DOLLAR &mt LSFT LPAR &mt LGUI RPAR  ACMD(QMARK)      &kp STAR       &mt RGUI LBKT  &mt RSFT RBKT  &mt RALT AMPS  &mt RCTL PLUS
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            ACMD(TILDE)    &kp HASH       EQUALHOLD      EXCLHOLD       ACMD(GRAVE)      ACMD(BSLH)     ACMD(FSLH)     &comma_morph   &dot_morph     &kp MINUS      _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 ___            ___            ___              ___            ___            ___ 
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(numfn_meh,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp MEH(F12)   &kp MEH(W)     &kp LS(TAB)    &swapper       &kp MEH(P)       &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &mt LCTL MEH(A) &mt LALT MEH(S) &mt LSFT MEH(R) &mt LGUI MEH(T) &kp MEH(G)   &kp N6         &mt RGUI N7    &mt RSFT N8    &mt RALT N9    &mt RCTL N0
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    ASCMD(GRAVE)   &kp MEH(X)     &kp MEH(Z)     &kp MEH(K)     &kp MEH(C)     &kp MEH(V)       &kp F11        &kp F12        &kp COMMA      &kp DOT        _X_            _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 _X_            &kp C_PP       &mo L_NUMMEH     ___            ___            ___
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)
ZMK_LAYER(numfn_full,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp F1         &kp F2         &kp F3         &kp F4         &kp F5           &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &mt LCTL N1    &mt LALT N2    &mt LSFT N3    &mt LGUI N4    &kp N5           &kp N6         &mt RGUI N7    &mt RSFT N8    &mt RALT N9    &mt RCTL N0
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            &kp KP_SLASH   &kp KP_ASTERISK &kp KP_SUBTRACT &kp KP_PLUS  _X_              &kp F11        &kp F12        &kp COMMA      &kp DOT        _X_            _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 ___            ___            ___              &mo L_NUMFN    &kp C_PP       _X_
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)
ZMK_LAYER(numpad,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   _X_            _X_            &mo L_NUMPAD   _X_            _X_              _X_            &kp N7         &kp N8         &kp N9         _X_
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   _X_            _X_            _X_            _X_            _X_              &kp KP_ASTERISK &kp N4        &kp N5         &kp N6         &kp KP_PLUS
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            _X_            _X_            _X_            _X_            _X_              &kp KP_SLASH   &kp N1         &kp N2         &kp N3         &kp KP_SUBTRACT _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 ___            ___            ___              &kp N0         &kp COMMA      &kp DOT
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(hyper,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp F12        ___            ___            ___            ___              ___            ___            ___            ___            &kp F3
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   ___            ___            ___            ___            ___              ___            ___            ___            ___            ___
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    &kp F11        ___            ___            ___            ___            ___              ___            ___            &kp F7         &kp F6         &kp F5         &kp F4
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 &mo L_HYPER    _X_            _X_              &kp F10        &kp F9         &kp F8
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(media,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   _X_            _X_            _X_            _X_            _X_              _X_            _X_            &kp C_VOL_UP   _X_            &bt BT_SEL 2
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &kp LCTL       &kp LALT       &kp LSFT       &kp LGUI       _X_              &kp C_BRI_UP   &kp C_PREV     &kp C_VOL_DN   &kp C_NEXT     &bt BT_SEL 1
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            _X_            _X_            _X_            _X_            _X_              &kp C_BRI_DN   _X_            &kp C_MUTE     _X_            &bt BT_SEL 0   &bt BT_CLR
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 &kp C_PP       _X_            _X_              &tog L_GAME    _X_            &mo L_MEDIA
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(navigation_left,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   _X_            &kp BSPC       &kp UP         &kp DEL        _X_              _X_            _X_            _X_            _X_            _X_
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   _X_            &kp LEFT       &kp DOWN       &kp RIGHT      &kp PG_UP        _X_            _X_            _X_            _X_            _X_
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            &mo L_NAVL     &kp HOME       _X_            &kp END        &kp PG_DN        _X_            _X_            _X_            _X_            _X_            _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 &kp TAB        &kp SPACE      &kp RET          _X_            _X_            _X_
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(navigation,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   &kp LG(Q)      &kp LG(W)      CMD_L_CSTAB    CMD_D_CTAB     CMD_SFT_G_F      _X_            &kp BSPC       &kp UP         &kp DEL        _X_
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   &mt LCTL LG(A) &mt LALT LG(S) &mt LSFT LG(R) &mt LGUI LG(T) CMD_G_F          &kp PG_UP      &kp LEFT       &kp DOWN       &kp RIGHT      &extend_word
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    &kp LG(LBKT)   &kp LG(X)      &kp LG(Z)      &kp LG(K)      &kp LG(C)      &kp LG(V)        &kp PG_DN      &kp HOME       &select_word   &kp END        &mo L_NAV      &kp LG(RBKT)
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 _X_            &mo L_NAV      _X_              &kp RET        &kp SPACE      &kp TAB
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)

/*
ZMK_LAYER(template,
//               ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
                   _X_            _X_            _X_            _X_            _X_              _X_            _X_            _X_            _X_            _X_
//               ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
                   _X_            _X_            _X_            _X_            _X_              _X_            _X_            _X_            _X_            _X_
//╭──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────╮
    _X_            _X_            _X_            _X_            _X_            _X_              _X_            _X_            _X_            _X_            _X_            _X_
//╰──────────────┼──────────────┼──────────────┴──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────┴──────────────╯
                                                 _X_            _X_            _X_              _X_            _X_            _X_
//                                             ╰──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────╯
)
*/