//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include "../zmk-nodefree-config/helper.h"

/* Layers aliases */
#define DEF  0
#define NAV  1
#define NUM  2
#define SHRT 3
#define WIN  4

// #include "mouse.dtsi"

/************************************************************************************/

#define _X_ &none
#define ___ &trans

#define QUICK_TAP_MS 175

/************************************************************************************/
/* General behavior configurations */

&sk {  // sticky-key config
    release-after-ms = <900>;
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/************************************************************************************/
/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                          // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/************************************************************************************/
/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap (i.e. double-tap): caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
// &caps_word {  // mods deactivate caps-word, requires PR #1451
//     /delete-property/ ignore-modifiers;
// };


// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&num_word>;
)
// ZMK_BEHAVIOR(num_dance, tap_dance,
    // tapping-term-ms = <200>;
    // bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
// )
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LPAR RPAR RIGHT LEFT F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12>;
    ignore-modifiers;
};


// smart-mouse, requires PR #1366
// ZMK_BEHAVIOR(smart_mouse, tri_state,
//     bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
//     ignored-layers = <MOUSE>;
// )

/************************************************************************************/
/* Other/my custom behaviors */

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <LT2>;
)

// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

// tap: question mark | shift + tap: exclamation mark
ZMK_BEHAVIOR(qexcl, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
#define LT_SPC_NAV &lt_spc_nav NAV 0
ZMK_BEHAVIOR(lt_spc_nav, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp SPACE>, <&dot_spc>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    bindings = <&kp DOT &kp SPACE &sk LSFT>;
)

/////////////////////////////////////////////////////
// hold-tap with a completely different key on hold (and not only modifiers)
ZMK_BEHAVIOR(cmdtap, macro_one_param,
    bindings = <&macro_press &kp LGUI>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LGUI>;
)
ZMK_BEHAVIOR(cmdsfttap, macro_one_param,
    bindings = <&macro_press &kp LGUI &kp LSFT>
             , <&macro_param_1to1>
             , <&macro_tap &kp MACRO_PLACEHOLDER>
             , <&macro_release &kp LSFT &kp LGUI>;
)
ZMK_BEHAVIOR(cmdhold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&cmdtap>, <&kp>;
)
ZMK_BEHAVIOR(cmdsfthold, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&cmdsfttap>, <&kp>;
)

#define ASCMD(keycode)  &cmdsfthold keycode LG(keycode)

// tap: CMD+G | hold: CMD+F
#define CMD_G_F      &cmdhold F LG(G)
// tap: CMD+SHFT+G | hold: CMD+SHFT+F
#define CMD_SFT_G_F  &cmdsfthold F LG(LS(G))
// tap: CMD+[ | hold: CMD+]
#define CMD_LR_BRKT  &cmdhold RBKT LG(LBKT)

/************************************************************************************/
/* Misc. defines */
#define CANCEL         &kp K_CANCEL             // cancel caps-word, num-word and smart-mouse
#define HYPER(keycode) &kp LC(LA(LS(LG(keycode))))

#include "combos.dtsi"  // requires layer aliases and some other macros

/************************************************************************************/
/* The actual keymap layers */

ZMK_LAYER(base,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  &kp Q         &kp W         &kp L         &kp D         &kp P           &kp J         &kp M         &kp U         &kp Y         &kp SQT
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &hml LCTL A   &hml LALT S   &hml LSFT R   &hml LGUI T   &kp G           &kp F         &hmr RGUI N   &hmr RSHFT E  &hmr RALT I   &hmr RCTRL O
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    &kp BSPC      &kp X         &kp Z         &kp K         &kp C         &kp V           &kp B         &kp H         &comma_morph  &dot_morph    &qexcl        &key_repeat
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &lt SHRT ESC  &smart_shft   &lt WIN RET     SMART_NUM     LT_SPC_NAV    &kp BSPC
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(navigation,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           _X_           _X_           _X_           CMD_SFT_G_F     &kp LA(BSPC)  &kp BSPC      &kp UP        &kp DEL       &kp LA(DEL)
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &kp LCTL      &kp LALT      &kp LSFT      &kp LGUI      CMD_G_F         &kp LA(LEFT)  &kp LEFT      &kp DOWN      &kp RIGHT     &kp LA(RIGHT)
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           &kp LG(X)     &kp LG(Z)     _X_           &kp LG(C)     &kp LG(V)       &kp PG_UP     &kp HOME      &kp PG_DN     &kp END       _X_           ___
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___             ___           &tog NAV      ___
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(numbers,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  &kp F12       &kp F7        &kp F8        &kp F9        &kp F12         _X_           &kp N7        &kp N8        &kp N9        _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  &hml LCTL F11 &hml LALT F4  &hml LSFT F5  &hml LGUI F6  &kp F11         &kp N0        &hmr RGUI N4  &hmr RSHFT N5 &hmr RALT N6  &hmr RCTRL DOT
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    ___           &kp F10       &kp F1        &kp F2        &kp F3        &kp F10         _X_           &kp N1        &kp N2        &kp N3        &kp COMMA     ___
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___             CANCEL        ___           ___
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(shortcuts,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  &kp LG(Q)     ASCMD(W)      &kp LC(LS(TAB)) &kp LC(TAB) CMD_SFT_G_F     &kp C_BRI_UP  _X_           &kp C_VOL_UP  _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  ASCMD(A)      ASCMD(S)      ASCMD(R)      ASCMD(T)      CMD_G_F         &kp C_BRI_DN  &kp C_PREV    &kp C_VOL_DN  &kp C_NEXT    _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           ASCMD(X)      ASCMD(Z)      CMD_LR_BRKT   ASCMD(C)      ASCMD(V)        _X_           _X_           &kp C_MUTE    _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              _X_           &kp CAPSLOCK  _X_             &kp C_PP      _X_           &kp K_CMENU
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(windows,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  HYPER(F9)     HYPER(W)      &kp LS(TAB)   &swapper      ASCMD(GRAVE)    _X_           _X_           _X_           _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  HYPER(A)      HYPER(S)      HYPER(R)      HYPER(T)      HYPER(G)        &bt BT_CLR    _X_           _X_           _X_           _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    HYPER(F10)    HYPER(X)      HYPER(Z)      HYPER(K)      HYPER(C)      HYPER(V)        _X_           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &bootloader   &sys_reset    _X_             &out OUT_TOG  &sys_reset    &bootloader
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

/*
ZMK_LAYER(template,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                  _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
    _X_           _X_           _X_           _X_           _X_           _X_             _X_           _X_           _X_           _X_           _X_           _X_
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              _X_           _X_           _X_             _X_           _X_           _X_
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)
*/